# This StatefulSet runs 1 pod with one Zero, one Alpha, & one Ratel containers.
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dgraph
spec:
  serviceName: dgraph
  replicas: 1
  selector:
      matchLabels:
        app: dgraph
  template:
    metadata:
      labels:
        app: dgraph
      annotations:
        vault.security.banzaicloud.io/vault-addr: "http://192.168.1.111:8200"
        vault.security.banzaicloud.io/vault-role: "vault-injector"
        vault.security.banzaicloud.io/vault-skip-verify: "true"
        vault.security.banzaicloud.io/vault-path: "kubernetes"
    spec:
      volumes:
      - name: dgraph-data
        hostPath:
          path: /mnt/zfs-nas/cluster/dgraph/dev
          type: Directory
      containers:
      - name: backup
        image: atticuss/dgbr:latest
        imagePullPolicy: IfNotPresent
        # dgraph alpha servers must whitelist external IPs for performing
        # exports. as we can't set internal IPs of docker pods at configuration
        # time, a CronJob k8s resource is out. instead, we dynamically build
        # out a normal cron within the runtime itself. this allows us to include
        # dgbr within the same pod as dgraph, enabling access via localhost.
        # this method also allows us to access vault-injected AWS auth tokens
        # when configuring the cron. toss an indefinite sleep afterwards so
        # that the container doesn't exist.
        command: ["sh", "-c", "echo \"#!/bin/sh\n\n/dgbr backup --AWS_ACCESS_KEY $AWS_ACCESS_KEY --AWS_SECRET_KEY $AWS_SECRET_KEY --region us-east-1 --bucket dgraph-backups-dev --export /exports/\" > /backup.sh && \
        chmod +x backup.sh && \
        echo \"0 0 * * * /backup.sh > /proc/1/fd/1 2>/proc/1/fd/2\" > /cron.txt && \
        touch /var/log/backup.log && \
        mkdir /exports && \
        crontab /cron.txt && \
        crond -f -l 8"]
        env:
          - name: AWS_ACCESS_KEY
            value: vault:kv/data/dgraph/dev#ACCESS_KEY
          - name: AWS_SECRET_KEY
            value: vault:kv/data/dgraph/dev#SECRET_KEY
      - name: auth
        image: docker.io/atticuss/dgraph-auth:latest
        imagePullPolicy: IfNotPresent
        ports:
          - containerPort: 5000
            name: auth-http
        command: ["/main"]
        env:
          - name: AUTH_SECRET
            value: vault:kv/data/dgraph/dev#AUTH_TOKEN
      - name: ratel
        image: dgraph/dgraph:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http-ratel
        command:
          - dgraph-ratel
      - name: zero
        image: dgraph/dgraph:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5080
          name: grpc-zero
        - containerPort: 6080
          name: http-zero
        volumeMounts:
        - name: dgraph-data
          mountPath: /dgraph
        command:
          - bash
          - "-c"
          - |
            set -ex
            dgraph zero --my=$(hostname -f):5080
      - name: alpha
        image: dgraph/dgraph:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http-alpha
        - containerPort: 9080
          name: grpc-alpha
        volumeMounts:
        - name: dgraph-data
          mountPath: /dgraph
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        command:
          - bash
          - "-c"
          - |
            set -ex
            dgraph alpha --my=$(hostname -f):7080 --zero dgraph-0.dgraph.${POD_NAMESPACE}.svc.cluster.local:5080 --whitelist 10.40.0.0
      terminationGracePeriodSeconds: 60
  updateStrategy:
    type: RollingUpdate
---
# This is the service that should be used by the clients of Dgraph to talk to the cluster.
apiVersion: v1
kind: Service
metadata:
  name: dgraph
  labels:
    app: dgraph
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    name: dgraph-auth
  - port: 5080
    targetPort: 5080
    name: grpc-zero
  - port: 6080
    targetPort: 6080
    name: http-zero
  - port: 8080
    targetPort: 8080
    name: http-alpha
  - port: 9080
    targetPort: 9080
    name: grpc-alpha
  - port: 8000
    targetPort: 8000
    name: http-ratel
  selector:
    app: dgraph
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: dgraph-ingress
  labels:
    app: dgraph
spec:
  entryPoints:
    - dgraph
  routes:
  - match: Host(`dev.dgraph.dc1.veraciousdata.io`)
    kind: Rule
    services:
    - name: dgraph
      port: 9080
      scheme: h2c
    middlewares:
      - name: dgraph-auth
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: dgraph-auth
  labels:
    app: dgraph
spec:
  forwardAuth:
    # this assumes we're running in the `dgraph-dev` namespace. will
    # need update this domain if that ever changes
    address: http://dgraph.dgraph-dev:5000/auth